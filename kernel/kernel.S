[bits 32]
%define ERROR_CODE nop      ;若在相关的异常中CPU已经自动压入了，这里表示错误码，为保持栈中格式统一，这里不做操作
%define ZERO push 0         ;若在相关异常中CPU没有压入错误码，这里为了统一格式，手工压入一个0

extern put_str              ;声明外部函数，表明咱们要用到
extern idt_table            ;idt_table是interrupt.c中注册的中断处理函数数组

section .data
global intr_entry_table
intr_entry_table:

%macro VECTOR 2             ;这里定义一个多行宏，后面的2是指传递两个参数,里面的%1,%2代表参数，类似linux shell脚本
section .text
intr%1entry:               ;每个中断处理程序都要压入中断向量号，所以一个中断类型一个中断处理程序，自己知道自己的中断向量号是多少
  %2                        ;手工压入32位数据或者空操作，保证最后都会需要跨过一个4字节来进行iret
  push ds
  push es
  push fs
  push gs
  pushad                    ;压入EAX,ECX,EDX,EBX,ESP,EBP,ESI,EDI
  
  ;如果是从片上进入的中断，除了往片上发送EOI外，还要往主片上发送EOI
  mov al, 0x20              ;中断结束命令EOI，这里R为0,SL为0,EOI为1
  out 0xa0, al              ;向从片发送，这里端口号可以使用dx或者立即数,OCW2
  out 0x20, al              ;向主片发送

  push %1                   ;不管idt_table中的目标函数是否需要参数，我们这里一律都压入中断向量号

  call [idt_table + %1*4]   ;调用idt_table中的C版本中断处理函数
  jmp intr_exit

section .data
  dd intr%1entry            ;存储各个中断入口程序的地址，形成intr_entry_table数组,这里是因为编译后会将相同的节合并成一个段，所以这里会生成一个数组
%endmacro                   ;多行宏结束标志

section .text
global intr_exit
intr_exit:
;下面是恢复上下文环境
  add esp,4                 ;跳过中断号
  popad
  pop gs
  pop fs
  pop es
  pop ds
  add esp, 4                ;跳过error_code或者说我们自己压入的0
  iretd

VECTOR 0x00,ZERO
VECTOR 0x01,ZERO
VECTOR 0x02,ZERO
VECTOR 0x03,ZERO 
VECTOR 0x04,ZERO
VECTOR 0x05,ZERO
VECTOR 0x06,ZERO
VECTOR 0x07,ZERO 
VECTOR 0x08,ERROR_CODE
VECTOR 0x09,ZERO
VECTOR 0x0a,ERROR_CODE
VECTOR 0x0b,ERROR_CODE 
VECTOR 0x0c,ZERO
VECTOR 0x0d,ERROR_CODE
VECTOR 0x0e,ERROR_CODE
VECTOR 0x0f,ZERO 
VECTOR 0x10,ZERO
VECTOR 0x11,ERROR_CODE
VECTOR 0x12,ZERO
VECTOR 0x13,ZERO 
VECTOR 0x14,ZERO
VECTOR 0x15,ZERO
VECTOR 0x16,ZERO
VECTOR 0x17,ZERO 
VECTOR 0x18,ERROR_CODE
VECTOR 0x19,ZERO
VECTOR 0x1a,ERROR_CODE
VECTOR 0x1b,ERROR_CODE 
VECTOR 0x1c,ZERO
VECTOR 0x1d,ERROR_CODE
VECTOR 0x1e,ERROR_CODE
VECTOR 0x1f,ZERO 
VECTOR 0x20,ZERO



